name: Deploy Counter Service to EKS and the Environment

on:
  # Trigger the workflow manually and optionally accept a 'destroy' input
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy the infrastructure'
        required: false
        default: 'false'
  
  # Trigger the workflow on a repository_dispatch event with type 'deploy'
  repository_dispatch:
    types: [deploy]

jobs:
  validate:
    name: Validate Terraform and YAML Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set AWS credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.2
        with:
          terraform_version: 1.5.7  # Ensure you are using the latest stable version

      # Initialize Terraform configuration
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      # Validate Terraform format to ensure it follows standards
      - name: Validate Terraform Format
        run: terraform fmt -check -recursive
        working-directory: ./terraform

      # Validate Terraform configuration files
      - name: Validate Terraform
        run: terraform validate
        working-directory: ./terraform

      # Apply Terraform configuration to create/update infrastructure
      - name: Terraform Apply
        run: |
          echo "Applying Terraform configuration"
          terraform apply -auto-approve
        working-directory: ./terraform 

  deploy:
    name: Deploy the Application EKS using Helm
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set AWS credentials
        run: | # TODO move this block to action file 
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'
  
      # Configure kubectl to use the EKS cluster 
      - name: Configure kubectl to use EKS cluster
        run: |
          echo "Configuring kubectl to use EKS cluster"
          aws eks update-kubeconfig --name ${{ vars.CLUSTER_NAME }} --region ${{ vars.AWS_REGION }}

      - name: Print Docker Image URL for Test
        run: |
          echo "Docker Image URL for deployment: ${{ github.event.client_payload.image_url }}"
  
      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: 'v3.5.4'
      
      # Deploy the application to EKS using Helm
      - name: Deploy with Helm
        run: |
          echo "Deploying with Helm"
          helm upgrade --install counter-service ./deployment \
            --set deployment.container.image=${{ github.event.client_payload.image_url }}  \
            --namespace ${{ vars.NAMESPACE }} \
            --create-namespace




 

        working-directory: ./terraform
      # Destroy the Terraform-managed infrastructure
      - name: Terraform Destroy
        run: |
          if [ "${{ vars.DESTROY }}" = "true" ]; then
            echo "Destroy the environment using Terraform"
            terraform init
            terraform destroy -auto-approve
          else
            echo "Skipping destroy as condition is not met"
          fi
        working-directory: ./terraform



  # destroy:
  #   name: Destroy Terraform Infrastructure
  #   runs-on: ubuntu-latest
  #   if: github.event.inputs.destroy == 'true'
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Set AWS credentials
  #       run: |      # Set AWS credentials as environment variables | need to move to action
  #         echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
  #         echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
  #         echo "AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
  #         export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
  #         export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         export AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2.0.2
  #       with:
  #         terraform_version: 1.5.7

  #       # Initialize Terraform configuration
  #     - name: Terraform Init
  #       run: terraform init
  #       working-directory: ./terraform

  #       # Destroy the Terraform-managed infrastructure
  #     - name: Terraform Destroy
  #       run: terraform destroy -auto-approve
  #       working-directory: ./terraform